version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: lms-postgres
    environment:
      POSTGRES_DB: lms_db
      POSTGRES_USER: lms_user
      POSTGRES_PASSWORD: lms_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - lms-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U lms_user -d lms_db"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Spring Boot Backend
  backend:
    build:
      context: ./lms-backend
      dockerfile: Dockerfile
    container_name: lms-backend
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/lms_db
      SPRING_DATASOURCE_USERNAME: lms_user
      SPRING_DATASOURCE_PASSWORD: lms_password
      SPRING_JPA_HIBERNATE_DDL_AUTO: validate
      SPRING_FLYWAY_ENABLED: "true"
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - lms-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # React Frontend
  frontend:
    build:
      context: ./lms-frontend
      dockerfile: Dockerfile
    container_name: lms-frontend
    environment:
      REACT_APP_API_BASE_URL: http://localhost:8080/api/v1
    ports:
      - "3000:80"
    depends_on:
      - backend
    networks:
      - lms-network

volumes:
  postgres_data:
    driver: local

networks:
  lms-network:
    driver: bridge
